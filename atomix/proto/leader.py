# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/leader/latch.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncGenerator, List, Optional

import betterproto

from atomix.proto import headers


class EventResponseType(betterproto.Enum):
    CHANGED = 0


@dataclass
class CreateRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)


@dataclass
class CreateResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)


@dataclass
class CloseRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    delete: bool = betterproto.bool_field(2)


@dataclass
class CloseResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)


@dataclass
class LatchRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    participant_id: str = betterproto.string_field(2)


@dataclass
class LatchResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    latch: "Latch" = betterproto.message_field(2)


@dataclass
class GetRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)


@dataclass
class GetResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    latch: "Latch" = betterproto.message_field(2)


@dataclass
class EventRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)


@dataclass
class EventResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    type: "EventResponseType" = betterproto.enum_field(2)
    latch: "Latch" = betterproto.message_field(3)


@dataclass
class Latch(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    leader: str = betterproto.string_field(2)
    participants: List[str] = betterproto.string_field(3)


class LeaderLatchServiceStub(betterproto.ServiceStub):
    """Leader latch service"""

    async def create(
        self, *, header: Optional[headers.RequestHeader] = None
    ) -> CreateResponse:
        """Create creates a leader latch"""

        request = CreateRequest()
        if header is not None:
            request.header = header

        return await self._unary_unary(
            "/atomix.leader.LeaderLatchService/Create", request, CreateResponse,
        )

    async def close(
        self, *, header: Optional[headers.RequestHeader] = None, delete: bool = False
    ) -> CloseResponse:
        """Close closes a leader latch"""

        request = CloseRequest()
        if header is not None:
            request.header = header
        request.delete = delete

        return await self._unary_unary(
            "/atomix.leader.LeaderLatchService/Close", request, CloseResponse,
        )

    async def latch(
        self,
        *,
        header: Optional[headers.RequestHeader] = None,
        participant_id: str = "",
    ) -> LatchResponse:
        """Latch attempts to acquire the leader latch"""

        request = LatchRequest()
        if header is not None:
            request.header = header
        request.participant_id = participant_id

        return await self._unary_unary(
            "/atomix.leader.LeaderLatchService/Latch", request, LatchResponse,
        )

    async def get(
        self, *, header: Optional[headers.RequestHeader] = None
    ) -> GetResponse:
        """Get gets the current leader"""

        request = GetRequest()
        if header is not None:
            request.header = header

        return await self._unary_unary(
            "/atomix.leader.LeaderLatchService/Get", request, GetResponse,
        )

    async def events(
        self, *, header: Optional[headers.RequestHeader] = None
    ) -> AsyncGenerator[EventResponse, None]:
        """Events listens for leader change events"""

        request = EventRequest()
        if header is not None:
            request.header = header

        async for response in self._unary_stream(
            "/atomix.leader.LeaderLatchService/Events", request, EventResponse,
        ):
            yield response
