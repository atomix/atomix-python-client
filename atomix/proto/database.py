# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/database/database.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto
import grpclib


@dataclass
class DatabaseId(betterproto.Message):
    """Database identifier"""

    # name is the name of the database
    name: str = betterproto.string_field(1)
    # namespace is the namespace to which the database belongs
    namespace: str = betterproto.string_field(2)


@dataclass
class Database(betterproto.Message):
    """Database configuration"""

    # id is the database identifier
    id: "DatabaseId" = betterproto.message_field(1)
    # partitions is a list of partitions in the cluster
    partitions: List["Partition"] = betterproto.message_field(2)


@dataclass
class DatabaseConfig(betterproto.Message):
    """Database configuration"""

    # nodes is a list of database replicas
    replicas: List["ReplicaConfig"] = betterproto.message_field(1)
    # partitions is a list of partitions owned by the replicas
    partitions: List["PartitionId"] = betterproto.message_field(2)


@dataclass
class ReplicaConfig(betterproto.Message):
    """Replica configuration"""

    # id is the unique member identifier
    id: str = betterproto.string_field(1)
    # host is the member host
    host: str = betterproto.string_field(2)
    # api_port is the port to use for the client API
    api_port: int = betterproto.int32_field(3)
    # protocol_port is the port to use for intra-cluster communication
    protocol_port: int = betterproto.int32_field(4)


@dataclass
class PartitionId(betterproto.Message):
    """Partition identifier"""

    partition: int = betterproto.int32_field(1)


@dataclass
class Partition(betterproto.Message):
    """Partition info"""

    partition_id: "PartitionId" = betterproto.message_field(1)
    endpoints: List["PartitionEndpoint"] = betterproto.message_field(2)


@dataclass
class PartitionEndpoint(betterproto.Message):
    """Partition endpoint"""

    host: str = betterproto.string_field(1)
    port: int = betterproto.int32_field(2)


@dataclass
class GetDatabaseRequest(betterproto.Message):
    """Gets a database in a namespace"""

    id: "DatabaseId" = betterproto.message_field(1)


@dataclass
class GetDatabaseResponse(betterproto.Message):
    """Returns a database in a namespace"""

    database: "Database" = betterproto.message_field(1)


@dataclass
class GetDatabasesRequest(betterproto.Message):
    """Gets a list of databases in a namespace"""

    namespace: str = betterproto.string_field(1)


@dataclass
class GetDatabasesResponse(betterproto.Message):
    """Returns a list of databases in a namespace"""

    databases: List["Database"] = betterproto.message_field(1)


class DatabaseServiceStub(betterproto.ServiceStub):
    """Atomix database service"""

    async def get_database(
        self, *, id: Optional["DatabaseId"] = None
    ) -> GetDatabaseResponse:
        """GetDatabase gets a database controlled by the controller"""

        request = GetDatabaseRequest()
        if id is not None:
            request.id = id

        return await self._unary_unary(
            "/atomix.database.DatabaseService/GetDatabase",
            request,
            GetDatabaseResponse,
        )

    async def get_databases(self, *, namespace: str = "") -> GetDatabasesResponse:
        """
        GetDatabases gets a list of databases controlled by the controller
        """

        request = GetDatabasesRequest()
        request.namespace = namespace

        return await self._unary_unary(
            "/atomix.database.DatabaseService/GetDatabases",
            request,
            GetDatabasesResponse,
        )
