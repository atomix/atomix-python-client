# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/list/list.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncGenerator, Optional

import betterproto

from atomix.proto import headers


class ResponseStatus(betterproto.Enum):
    OK = 0
    NOOP = 1
    WRITE_LOCK = 2
    OUT_OF_BOUNDS = 3


class EventResponseType(betterproto.Enum):
    NONE = 0
    ADDED = 1
    REMOVED = 2


@dataclass
class CreateRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)


@dataclass
class CreateResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)


@dataclass
class CloseRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    delete: bool = betterproto.bool_field(2)


@dataclass
class CloseResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)


@dataclass
class SizeRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)


@dataclass
class SizeResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    size: int = betterproto.int32_field(2)


@dataclass
class ContainsRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    value: str = betterproto.string_field(2)


@dataclass
class ContainsResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    contains: bool = betterproto.bool_field(2)


@dataclass
class AppendRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    value: str = betterproto.string_field(2)


@dataclass
class AppendResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    status: "ResponseStatus" = betterproto.enum_field(2)


@dataclass
class GetRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    index: int = betterproto.uint32_field(2)


@dataclass
class GetResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    status: "ResponseStatus" = betterproto.enum_field(2)
    value: str = betterproto.string_field(3)


@dataclass
class SetRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    index: int = betterproto.uint32_field(2)
    value: str = betterproto.string_field(3)


@dataclass
class SetResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    status: "ResponseStatus" = betterproto.enum_field(2)


@dataclass
class InsertRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    index: int = betterproto.uint32_field(2)
    value: str = betterproto.string_field(3)


@dataclass
class InsertResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    status: "ResponseStatus" = betterproto.enum_field(2)


@dataclass
class RemoveRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    index: int = betterproto.uint32_field(2)


@dataclass
class RemoveResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    status: "ResponseStatus" = betterproto.enum_field(2)
    value: str = betterproto.string_field(3)


@dataclass
class ClearRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)


@dataclass
class ClearResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)


@dataclass
class EventRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    replay: bool = betterproto.bool_field(2)


@dataclass
class EventResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    type: "EventResponseType" = betterproto.enum_field(2)
    index: int = betterproto.uint32_field(3)
    value: str = betterproto.string_field(4)


@dataclass
class IterateRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)


@dataclass
class IterateResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    value: str = betterproto.string_field(2)


class ListServiceStub(betterproto.ServiceStub):
    """ListService implements a distributed list"""

    async def create(
        self, *, header: Optional[headers.RequestHeader] = None
    ) -> CreateResponse:
        """Create creates a list session"""

        request = CreateRequest()
        if header is not None:
            request.header = header

        return await self._unary_unary(
            "/atomix.list.ListService/Create", request, CreateResponse,
        )

    async def close(
        self, *, header: Optional[headers.RequestHeader] = None, delete: bool = False
    ) -> CloseResponse:
        """Close closes a list"""

        request = CloseRequest()
        if header is not None:
            request.header = header
        request.delete = delete

        return await self._unary_unary(
            "/atomix.list.ListService/Close", request, CloseResponse,
        )

    async def size(
        self, *, header: Optional[headers.RequestHeader] = None
    ) -> SizeResponse:
        """Size gets the number of elements in the list"""

        request = SizeRequest()
        if header is not None:
            request.header = header

        return await self._unary_unary(
            "/atomix.list.ListService/Size", request, SizeResponse,
        )

    async def contains(
        self, *, header: Optional[headers.RequestHeader] = None, value: str = ""
    ) -> ContainsResponse:
        """Contains returns whether the list contains a value"""

        request = ContainsRequest()
        if header is not None:
            request.header = header
        request.value = value

        return await self._unary_unary(
            "/atomix.list.ListService/Contains", request, ContainsResponse,
        )

    async def append(
        self, *, header: Optional[headers.RequestHeader] = None, value: str = ""
    ) -> AppendResponse:
        """Append appends a value to the list"""

        request = AppendRequest()
        if header is not None:
            request.header = header
        request.value = value

        return await self._unary_unary(
            "/atomix.list.ListService/Append", request, AppendResponse,
        )

    async def insert(
        self,
        *,
        header: Optional[headers.RequestHeader] = None,
        index: int = 0,
        value: str = "",
    ) -> InsertResponse:
        """Insert inserts a value at a specific index in the list"""

        request = InsertRequest()
        if header is not None:
            request.header = header
        request.index = index
        request.value = value

        return await self._unary_unary(
            "/atomix.list.ListService/Insert", request, InsertResponse,
        )

    async def get(
        self, *, header: Optional[headers.RequestHeader] = None, index: int = 0
    ) -> GetResponse:
        """Get gets the value at an index in the list"""

        request = GetRequest()
        if header is not None:
            request.header = header
        request.index = index

        return await self._unary_unary(
            "/atomix.list.ListService/Get", request, GetResponse,
        )

    async def set(
        self,
        *,
        header: Optional[headers.RequestHeader] = None,
        index: int = 0,
        value: str = "",
    ) -> SetResponse:
        """Set sets the value at an index in the list"""

        request = SetRequest()
        if header is not None:
            request.header = header
        request.index = index
        request.value = value

        return await self._unary_unary(
            "/atomix.list.ListService/Set", request, SetResponse,
        )

    async def remove(
        self, *, header: Optional[headers.RequestHeader] = None, index: int = 0
    ) -> RemoveResponse:
        """Remove removes an element from the list"""

        request = RemoveRequest()
        if header is not None:
            request.header = header
        request.index = index

        return await self._unary_unary(
            "/atomix.list.ListService/Remove", request, RemoveResponse,
        )

    async def clear(
        self, *, header: Optional[headers.RequestHeader] = None
    ) -> ClearResponse:
        """Clear removes all elements from the list"""

        request = ClearRequest()
        if header is not None:
            request.header = header

        return await self._unary_unary(
            "/atomix.list.ListService/Clear", request, ClearResponse,
        )

    async def events(
        self, *, header: Optional[headers.RequestHeader] = None, replay: bool = False
    ) -> AsyncGenerator[EventResponse, None]:
        """Events listens for change events"""

        request = EventRequest()
        if header is not None:
            request.header = header
        request.replay = replay

        async for response in self._unary_stream(
            "/atomix.list.ListService/Events", request, EventResponse,
        ):
            yield response

    async def iterate(
        self, *, header: Optional[headers.RequestHeader] = None
    ) -> AsyncGenerator[IterateResponse, None]:
        """Iterate streams all values in the list"""

        request = IterateRequest()
        if header is not None:
            request.header = header

        async for response in self._unary_stream(
            "/atomix.list.ListService/Iterate", request, IterateResponse,
        ):
            yield response
