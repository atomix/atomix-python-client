# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/election/election.proto
# plugin: python-betterproto
from dataclasses import dataclass
from datetime import datetime
from typing import AsyncGenerator, List, Optional

import betterproto

from atomix.proto import headers


class EventResponseType(betterproto.Enum):
    CHANGED = 0


@dataclass
class CreateRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)


@dataclass
class CreateResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)


@dataclass
class CloseRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    delete: bool = betterproto.bool_field(2)


@dataclass
class CloseResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)


@dataclass
class EnterRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    candidate_id: str = betterproto.string_field(2)


@dataclass
class EnterResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    term: "Term" = betterproto.message_field(2)


@dataclass
class WithdrawRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    candidate_id: str = betterproto.string_field(2)


@dataclass
class WithdrawResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    term: "Term" = betterproto.message_field(2)


@dataclass
class AnointRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    candidate_id: str = betterproto.string_field(2)


@dataclass
class AnointResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    term: "Term" = betterproto.message_field(2)


@dataclass
class PromoteRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    candidate_id: str = betterproto.string_field(2)


@dataclass
class PromoteResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    term: "Term" = betterproto.message_field(2)


@dataclass
class EvictRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)
    candidate_id: str = betterproto.string_field(2)


@dataclass
class EvictResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    term: "Term" = betterproto.message_field(2)


@dataclass
class GetTermRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)


@dataclass
class GetTermResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    term: "Term" = betterproto.message_field(2)


@dataclass
class EventRequest(betterproto.Message):
    header: headers.RequestHeader = betterproto.message_field(1)


@dataclass
class EventResponse(betterproto.Message):
    header: headers.ResponseHeader = betterproto.message_field(1)
    type: "EventResponseType" = betterproto.enum_field(2)
    term: "Term" = betterproto.message_field(3)


@dataclass
class Term(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    timestamp: datetime = betterproto.message_field(2)
    leader: str = betterproto.string_field(3)
    candidates: List[str] = betterproto.string_field(4)


class LeaderElectionServiceStub(betterproto.ServiceStub):
    """LeaderElectionService implements a distributed leader election"""

    async def create(
        self, *, header: Optional[headers.RequestHeader] = None
    ) -> CreateResponse:
        """Create creates a LeaderElection instance"""

        request = CreateRequest()
        if header is not None:
            request.header = header

        return await self._unary_unary(
            "/atomix.election.LeaderElectionService/Create", request, CreateResponse,
        )

    async def close(
        self, *, header: Optional[headers.RequestHeader] = None, delete: bool = False
    ) -> CloseResponse:
        """Close closes a LeaderElection instance"""

        request = CloseRequest()
        if header is not None:
            request.header = header
        request.delete = delete

        return await self._unary_unary(
            "/atomix.election.LeaderElectionService/Close", request, CloseResponse,
        )

    async def enter(
        self, *, header: Optional[headers.RequestHeader] = None, candidate_id: str = ""
    ) -> EnterResponse:
        """Enter enters the leader election"""

        request = EnterRequest()
        if header is not None:
            request.header = header
        request.candidate_id = candidate_id

        return await self._unary_unary(
            "/atomix.election.LeaderElectionService/Enter", request, EnterResponse,
        )

    async def withdraw(
        self, *, header: Optional[headers.RequestHeader] = None, candidate_id: str = ""
    ) -> WithdrawResponse:
        """Withdraw withdraws a candidate from the leader election"""

        request = WithdrawRequest()
        if header is not None:
            request.header = header
        request.candidate_id = candidate_id

        return await self._unary_unary(
            "/atomix.election.LeaderElectionService/Withdraw",
            request,
            WithdrawResponse,
        )

    async def anoint(
        self, *, header: Optional[headers.RequestHeader] = None, candidate_id: str = ""
    ) -> AnointResponse:
        """Anoint anoints a candidate leader"""

        request = AnointRequest()
        if header is not None:
            request.header = header
        request.candidate_id = candidate_id

        return await self._unary_unary(
            "/atomix.election.LeaderElectionService/Anoint", request, AnointResponse,
        )

    async def promote(
        self, *, header: Optional[headers.RequestHeader] = None, candidate_id: str = ""
    ) -> PromoteResponse:
        """Promote promotes a candidate"""

        request = PromoteRequest()
        if header is not None:
            request.header = header
        request.candidate_id = candidate_id

        return await self._unary_unary(
            "/atomix.election.LeaderElectionService/Promote", request, PromoteResponse,
        )

    async def evict(
        self, *, header: Optional[headers.RequestHeader] = None, candidate_id: str = ""
    ) -> EvictResponse:
        """Evict evicts a candidate from the election"""

        request = EvictRequest()
        if header is not None:
            request.header = header
        request.candidate_id = candidate_id

        return await self._unary_unary(
            "/atomix.election.LeaderElectionService/Evict", request, EvictResponse,
        )

    async def get_term(
        self, *, header: Optional[headers.RequestHeader] = None
    ) -> GetTermResponse:
        """GetTerm gets the current leadership term"""

        request = GetTermRequest()
        if header is not None:
            request.header = header

        return await self._unary_unary(
            "/atomix.election.LeaderElectionService/GetTerm", request, GetTermResponse,
        )

    async def events(
        self, *, header: Optional[headers.RequestHeader] = None
    ) -> AsyncGenerator[EventResponse, None]:
        """Events listens for leadership events"""

        request = EventRequest()
        if header is not None:
            request.header = header

        async for response in self._unary_stream(
            "/atomix.election.LeaderElectionService/Events", request, EventResponse,
        ):
            yield response
