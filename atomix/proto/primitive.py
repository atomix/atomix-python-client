# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: atomix/primitive/primitive.proto, atomix/primitive/metadata.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import List, Optional

import betterproto

from atomix.proto import database


class PrimitiveType(betterproto.Enum):
    """PrimitiveType is a primitive type"""

    UNKNOWN = 0
    COUNTER = 1
    ELECTION = 2
    INDEXED_MAP = 3
    LEADER_LATCH = 4
    LIST = 5
    LOCK = 6
    LOG = 7
    MAP = 8
    SET = 9
    VALUE = 10


@dataclass
class PrimitiveId(betterproto.Message):
    """Namespaced primitive identifier"""

    name: str = betterproto.string_field(1)
    namespace: str = betterproto.string_field(2)


@dataclass
class CreatePrimitiveRequest(betterproto.Message):
    """CreatePrimitiveRequest is a request to create a primitive"""

    database: database.DatabaseId = betterproto.message_field(1)
    primitive: "PrimitiveId" = betterproto.message_field(2)
    type: "PrimitiveType" = betterproto.enum_field(3)


@dataclass
class CreatePrimitiveResponse(betterproto.Message):
    """CreatePrimitiveResponse is a response for creating a primitive"""

    primitive: "PrimitiveMetadata" = betterproto.message_field(1)


@dataclass
class GetPrimitiveRequest(betterproto.Message):
    """GetPrimitiveRequest is a request for primitive metadata"""

    database: database.DatabaseId = betterproto.message_field(1)
    primitive: "PrimitiveId" = betterproto.message_field(2)


@dataclass
class GetPrimitiveResponse(betterproto.Message):
    """GetPrimitiveResponse is a response containing primitive metadata"""

    primitive: "PrimitiveMetadata" = betterproto.message_field(1)


@dataclass
class GetPrimitivesRequest(betterproto.Message):
    """GetPrimitivesRequest is a request for primitive metadata"""

    database: database.DatabaseId = betterproto.message_field(1)
    primitive: "PrimitiveId" = betterproto.message_field(2)
    type: "PrimitiveType" = betterproto.enum_field(3)


@dataclass
class GetPrimitivesResponse(betterproto.Message):
    """GetPrimitivesResponse is a response containing primitive metadata"""

    primitives: List["PrimitiveMetadata"] = betterproto.message_field(1)


@dataclass
class PrimitiveMetadata(betterproto.Message):
    """PrimitiveMetadata indicates the type and name of a primitive"""

    database: database.DatabaseId = betterproto.message_field(1)
    primitive: "PrimitiveId" = betterproto.message_field(2)
    type: "PrimitiveType" = betterproto.enum_field(3)


@dataclass
class DeletePrimitiveRequest(betterproto.Message):
    """DeletePrimitiveRequest is a request to delete a primitive"""

    database: database.DatabaseId = betterproto.message_field(1)
    primitive: "PrimitiveId" = betterproto.message_field(2)


@dataclass
class DeletePrimitiveResponse(betterproto.Message):
    """DeletePrimitiveResponse is a response for deleting a primitive"""

    primitive: "PrimitiveMetadata" = betterproto.message_field(1)


class PrimitiveServiceStub(betterproto.ServiceStub):
    """
    PrimitiveService is a service for providing partition/primitive metadata
    """

    async def create_primitive(
        self,
        *,
        database: Optional[database.DatabaseId] = None,
        primitive: Optional["PrimitiveId"] = None,
        type: "PrimitiveType" = 0,
    ) -> CreatePrimitiveResponse:
        """CreatePrimitive creates a new primitive"""

        request = CreatePrimitiveRequest()
        if database is not None:
            request.database = database
        if primitive is not None:
            request.primitive = primitive
        request.type = type

        return await self._unary_unary(
            "/atomix.primitive.PrimitiveService/CreatePrimitive",
            request,
            CreatePrimitiveResponse,
        )

    async def get_primitive(
        self,
        *,
        database: Optional[database.DatabaseId] = None,
        primitive: Optional["PrimitiveId"] = None,
    ) -> GetPrimitiveResponse:
        """GetPrimitive returns a primitive in the system"""

        request = GetPrimitiveRequest()
        if database is not None:
            request.database = database
        if primitive is not None:
            request.primitive = primitive

        return await self._unary_unary(
            "/atomix.primitive.PrimitiveService/GetPrimitive",
            request,
            GetPrimitiveResponse,
        )

    async def get_primitives(
        self,
        *,
        database: Optional[database.DatabaseId] = None,
        primitive: Optional["PrimitiveId"] = None,
        type: "PrimitiveType" = 0,
    ) -> GetPrimitivesResponse:
        """GetPrimitives returns a list of primitives in the system"""

        request = GetPrimitivesRequest()
        if database is not None:
            request.database = database
        if primitive is not None:
            request.primitive = primitive
        request.type = type

        return await self._unary_unary(
            "/atomix.primitive.PrimitiveService/GetPrimitives",
            request,
            GetPrimitivesResponse,
        )

    async def delete_primitive(
        self,
        *,
        database: Optional[database.DatabaseId] = None,
        primitive: Optional["PrimitiveId"] = None,
    ) -> DeletePrimitiveResponse:
        """DeletePrimitive deletes a primitive"""

        request = DeletePrimitiveRequest()
        if database is not None:
            request.database = database
        if primitive is not None:
            request.primitive = primitive

        return await self._unary_unary(
            "/atomix.primitive.PrimitiveService/DeletePrimitive",
            request,
            DeletePrimitiveResponse,
        )
